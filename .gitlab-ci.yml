default:
  image: python:3.11.4
  cache:
    paths:
      - .cache/pip
before_script:
  - apt-get update -qq && apt-get install -y curl
  - curl -L https://fly.io/install.sh | sh
  - export FLYCTL_INSTALL="/root/.fly"
  - export PATH="$FLYCTL_INSTALL/bin:$PATH"
  - python --version
  - pip install virtualenv
  - python -m venv .venv

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  PYTHONPATH: "$CI_PROJECT_DIR"

stages:
  - install
  - test
  - code_quality
  - deploy

install_dependencies:
  stage: install
  script:
    - source .venv/bin/activate
    - pip install -r dev-requirements.txt
    - pip install -r requirements.txt
    - pip install pre-commit pytest
  cache:
    key: "$CI_COMMIT_REF_NAME"
    paths:
      - .venv/
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" || $CI_COMMIT_BRANCH == "main"'
    - changes:
        - Makefile
        - dev-requirements.in
        - requirements.in
        - pyproject.toml
      when: never
    - when: on_success

test:
  stage: test
  image: python:3.11.4
  script:
    - source .venv/bin/activate
    - python -m pytest -v
  cache:
    key: "$CI_COMMIT_REF_NAME"
    paths:
      - .venv/
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" || $CI_COMMIT_BRANCH == "main"'
    - changes:
        - Makefile
        - dev-requirements.in
        - requirements.in
        - pyproject.toml
      when: never
    - when: on_success

black:
  stage: code_quality
  script:
    - source .venv/bin/activate
    - pip install pre-commit
    - pre-commit run black --all-files
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" || $CI_COMMIT_BRANCH == "main"'

flake8:
  stage: code_quality
  script:
    - source .venv/bin/activate
    - pip install pre-commit
    - pre-commit run flake8 --all-files
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" || $CI_COMMIT_BRANCH == "main"'

bandit:
  stage: code_quality
  script:
    - source .venv/bin/activate
    - pip install pre-commit
    - pre-commit run bandit --all-files
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" || $CI_COMMIT_BRANCH == "main"'

deploy-prod:
  stage: deploy
  script:
    - echo "Deploy app from $CI_COMMIT_BRANCH branch"
    - flyctl auth token $FLY_API_TOKEN
    - flyctl deploy --ha=false --config app/fly.toml
  environment: production
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main"'
    - when: manual
