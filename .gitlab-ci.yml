---
workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" || $CI_COMMIT_BRANCH == "main"'
      when: always
    - when: never

default:
  image: python:3.11.7
before_script:
  - apt-get update -qq && apt-get install -y curl
  - curl -L https://fly.io/install.sh | sh
  - export FLYCTL_INSTALL="/root/.fly"
  - export PATH="$FLYCTL_INSTALL/bin:$PATH"
  - python --version
  - python -m pip install virtualenv
  - python -m venv .venv

variables:
  PYTHONPATH: "$CI_PROJECT_DIR"

stages:
  - install
  - test
  - code_quality
  - deploy

install_dependencies:
  stage: install
  script:
    - source .venv/bin/activate
    -  python -m pip install -r app/requirements/requirements-dev.txt
    -  python -m pip install -r app/requirements/requirements.txt
    -  python -m pip install pre-commit
  rules:
    - changes:
        - Makefile
        - base.in
        - requirements-requirements-test.in
        - requirements-dev.in
        - requirements.in
        - pyproject.toml
      when: never
    - when: always

config_changes:
  stage: test
  image: python:3.11.7
  script:
    - source .venv/bin/activate
  rules:
    - changes:
        - Makefile
        - requirements-dev.in
        - requirements.in
        - pyproject.toml
      when: never
    - when: always

bandit:
  stage: code_quality
  script:
    - source .venv/bin/activate
    - python -m pip install pre-commit
    - pre-commit run bandit --all-files
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" || $CI_COMMIT_BRANCH == "main"'
    - when: always

# Add a new deploy-backend-staging job
deploy-backend-staging:
  stage: deploy
  script:
    - echo "Deploy backend app to staging from $CI_COMMIT_BRANCH branch"
    - flyctl auth token $FLY_API_TOKEN
    - flyctl deploy --ha=false --config app/fly.staging.toml
  environment: staging
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^(dev|feature-.*)$/'
    - when: manual
    - if: $CI_MERGE_REQUEST_TITLE =~ /^Draft:/
      when: never

deploy-backend:
  stage: deploy
  script:
    - echo "Deploy backend app from $CI_COMMIT_BRANCH branch"
    - flyctl auth token $FLY_API_TOKEN
    - flyctl deploy --ha=false --config app/fly.production.toml
  environment: production
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main"'
    - when: manual
    - if: $CI_MERGE_REQUEST_TITLE =~ /^Draft:/
      when: never
